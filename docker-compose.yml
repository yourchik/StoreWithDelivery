version: '3.9'

#volumes:
#  zookeeper_data:
#    driver: local
#  kafka_data:
#    driver: local
    
services:
#  zookeeper:
#    image: docker.io/bitnami/zookeeper:3.9
#    ports:
#      - "2181:2181"
#    volumes:
#      - "zookeeper_data:/bitnami"
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#    networks:
#      - default
#    healthcheck:
#      test: ["CMD", "nc", "-z", "localhost", "2181"]
#      interval: 10s
#      timeout: 3s
#      retries: 3
#  kafka:
#    image: docker.io/bitnami/kafka:3.4
#    ports:
#      - "9092:9092"
#    volumes:
#      - "kafka_data:/bitnami"
#    environment:
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#    networks:
#      - default
#    depends_on:
#      - zookeeper
#    healthcheck:
#      test: [ "CMD", "broker-api-versions", "--bootstrap-server", "kafka:9092" ]
#      interval: 10s
#      timeout: 10s
#      retries: 5
  
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    ports:
#      - "8080:8080"
#    restart: always
#    depends_on:
#      kafka:
#        condition: service_started
#    networks:
#      - default
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  postgres:
    image: postgres:15.7-alpine3.20
    environment:
      POSTGRES_DB: store
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d store" ]
      interval: 10s
      timeout: 5s
      retries: 5
#
  store_application:
    build:
      context: .
      dockerfile: Store/Store.Presentation/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
#      kafka:
#        condition: service_healthy
    environment:
#      KAFKA__BOOTSTRAP_SERVERS: kafka:9092
#      KAFKA__CLIENT_ID: store_app
#      KAFKA__GROUP_ID: store_app_group
      ConnectionStrings__DefaultConnection: Host=postgres;Database=store;Username=user;Password=password
    ports:
      - "5000:80"
    volumes:
      - ./Store:/app
#
#  delivery_application:
#    build:
#      context: .
#      dockerfile: Delivery/Delivery.Presentation/Dockerfile
#    depends_on:
#      kafka:
#        condition: service_healthy
#    environment:
#      KAFKA__BOOTSTRAP_SERVERS: kafka:9092
#      KAFKA__CLIENT_ID: delivery_app
#      KAFKA__GROUP_ID: delivery_app_group
#    ports:
#      - "5001:80"
#    volumes:
#      - ./Delivery:/app