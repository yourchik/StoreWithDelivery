services:
  store_application:
    build:
      context: .
      dockerfile: Store/Store.Presentation/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ConnectionStrings__DefaultConnection: Host=postgres_store;Port=5434;Database=store;Username=user;Password=password
      RABBITMQ__HOSTNAME: rabbitmq
      RABBITMQ__USERNAME: user
      RABBITMQ__PASSWORD: password
    ports:
      - "8070:8070"

  delivery_application:
    build:
      context: .
      dockerfile: Delivery/Delivery.Presentation/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ConnectionStrings__DefaultConnection: Host=postgres_delivery;Port=5432;Database=delivery;Username=user;Password=password
      RABBITMQ__HOSTNAME: rabbitmq
      RABBITMQ__USERNAME: user
      RABBITMQ__PASSWORD: password
    ports:
      - "8080:8080"
  
  postgres_store:
    image: postgres:15.7-alpine3.20
    restart: always
    container_name: postgres_store
    environment:
      POSTGRES_DB: store
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d store" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_delivery:
    image: postgres:15.7-alpine3.20
    restart: always
    container_name: postgres_delivery
    environment:
      POSTGRES_DB: delivery
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d store" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13.6-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  elasticsearch:
    image: elasticsearch:7.14.0
    restart: always
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"

  logstash:
    image: logstash:7.14.0
    restart: always
    container_name: logstash
    ports:
      - 5044:5044
      - 5045:5045
      - 9600:9600
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.14.0
    restart: always
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  